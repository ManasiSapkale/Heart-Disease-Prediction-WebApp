# -*- coding: utf-8 -*-
"""Heart dataset CODE.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZBB918hhUmVtvxRz4vTwgr75GfCMXvJU

importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix

"""data collection and processing"""

#loading the csv data to a pandas Dataframe
heart_data =pd.read_csv('/content/Heart.csv')

"""# New Section"""

#print first 5 rows of the dataset
heart_data.head()

#print last 5 rows of the dataset
heart_data.tail()

#number of rows and column in the dataset
heart_data.shape

#getting some info about the data
heart_data.info()

#statistical measures about the data
heart_data.describe()

#checking the distribution of Target variable
heart_data['target'].value_counts()

"""1 ->Defective Heart


0 ->Healthy Heart

splitting the features and Target
"""

X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']

print(X)

print(Y)

# Split the dataset into feature matrix X and target vector y
X = heart_data.iloc[:, :-1]
Y = heart_data.iloc[:, -1]

X = X.values
Y = Y.values

X_std=StandardScaler().fit_transform(X)

"""Splitting the data into train data and test data"""

X_train, X_test, Y_train,Y_test = train_test_split(X,Y, test_size= 0.6,random_state=42)

# Fit a logistic regression model on the training data
clf = LogisticRegression(random_state=42)
clf.fit(X_train, Y_train)

# Use the trained model to make predictions on the test set
Y_pred = clf.predict(X_test)

#Calculate the accuracy of the model on the test set
accuracy = accuracy_score(Y_test, Y_pred)
print(f'Test accuracy: {accuracy:.2f}')

print(X.shape, X_train.shape, X_test.shape)

# Create an instance of the RandomForestClassifier model
Heart_Disease = RandomForestClassifier()

# Fit the model to your training data
Heart_Disease.fit(X_train, Y_train)

"""Model Training

Logistic Regression
"""

# create logistic regression object with feature names
model = LogisticRegression()

#training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

# Make predictions on the test data
Y_pred = model.predict(X_test)

"""Model Evaluation




Accuracy Score
"""

# Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ',training_data_accuracy)

#accuracy on testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ',test_data_accuracy)

"""Building a Prediction System"""

input_data =(53,1,0,140,203,1,0,155,1,3.1,0,0,3)

#change the input datato a numpy array
input_data_as_numpy_array= np.asarray(input_data)

#reshape the numpy array as we are predictiong for only instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

# check the type of the prediction object
print(prediction)

if (prediction[0] == 0):
  print('The person does not have a Heart Disease')
else:
  print('The person has a Heart Disease')

"""saving the trained model"""

import pickle
from sklearn.ensemble import RandomForestClassifier

# create a random forest classifier
classifier = RandomForestClassifier()

# save the trained classifier to a file
filename = 'Heart_model.sav'
pickle.dump(classifier, open(filename, 'wb'))

#loading the saved model
loading_model =pickle.load(open('Heart_model.sav','rb'))

input_data =(53,1,0,140,203,1,0,155,1,3.1,0,0,3)

#change the input datato a numpy array
input_data_as_numpy_array= np.asarray(input_data)

#reshape the numpy array as we are predictiong for only instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

# check the type of the prediction object
print(prediction)

if (prediction[0] == 0):
  print('The person does not have a Heart Disease')
else:
  print('The person has a Heart Disease')